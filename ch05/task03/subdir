#!/bin/bash

: '
It is possible to print out all of the directories below a given one by using the -R option
of ls. Unfortunately, this doesn’t give much idea about the directory structure because
it prints all the files and directories line by line. Write a script that performs a recursive
directory listing and produces output that gives an idea of the structure for a small
number of subdirectories.
'

function recls() {
    singletab="\t"
    files=$(command ls)
    for tryfile in $files; do
        echo $tryfile

        if [ -d $tryfile ]; then
            thisfile=$tryfile
            recdir $(command ls $tryfile)
        fi
    done
     unset dir singletab tab
}
function recdir() {
    tab=${tab}${singletab}

    for file in "$@"; do
        echo -e $tab$file
        thisfile=${thisfile}/${file}

        if [ -d "$thisfile" ]; then
            recdir $(command ls $thisfile)
        fi

        thisfile=${thisfile%/*}
    done
     tab=${tab%"$singletab"}

}

recls
: '
task: home work: todo my own version
1. In the current version, there is no way to determine if biog is a file or a directory.
An empty directory looks no different to a file in the listing. Change the output
so it appends a / to each directory name when it displays it.

2. Modify the code so that it only recurses down a maximum of eight subdirectories 
(which is about the maximum before the lines overflow the right-hand side
of the screen). Hint: think about how TABs have been implemented.

3. Change the output so it includes dashed lines and adds a blank line after each
directory, thus:

At the start of this section we pointed out that the for loop in its standard form
wasn’t capable of iterating over a specified range of values as can be done in most
programming languages. bash 2.0 introduced a new style of for loop which caters for
this task; the arithmetic for loop. Well come back to it in the next chapter when we
look at arithmetic operations.
'
         



